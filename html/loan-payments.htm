<!-- https://jay23606.github.io/chat-gpt-voice/html/loan-payments.htm -->
<body>
<style>
body, textarea{font-size: small; font-family: times new roman}
label{display:inline-block;width:100px}
</style>

	<fieldset>
	<legend>
		<h2>New Loan Entry</h2>
	</legend>
		<form id="newLoanForm">
			<label for="loanAddress">Loan Address:</label>
			<input type="text" id="loanAddress" name="loanName" required><br>

			<label for="borrowerName">Borrower Name:</label>
			<input type="text" id="borrowerName" name="borrowerName" required><br>

			<label for="loanDate">Loan Date:</label>
			<input type="date" id="loanDate" name="loanDate" required><br>

			<label for="interestRate">Interest Rate:</label>
			<input type="number" step="0.01" id="interestRate" name="interestRate" required><br>

			<label for="loanAmount">Loan Amount:</label>
			<input type="number" step="0.01" id="loanAmount" name="loanAmount" required><br>

			<label for="escrowAmount">Escrow Amount:</label>
			<input type="number" step="0.01" id="escrowAmount" name="escrowAmount" required><br>
			
			<fieldset>
			<legend>
				<button type="button" onclick="addPaymentField()">Add Additional Payment</button>
			</legend>
				<div id="paymentEntries">
					<div class="payment-entry">
						<label for="paymentDate">Payment Date:</label>
						<input type="date" name="paymentDate[]" required>
				
						<label for="paymentAmount">Payment Amount:</label>
						<input type="number" step="0.01" name="paymentAmount[]" required>
					</div>
				</div>
			</fieldset>
			<button type="button" onclick="addNewLoan()">Add Loan</button>
		</form>
	</fieldset>

	<fieldset>
		<legend>
			<button type="button" onclick="importJSON()">Import JSON (Restore)</button> /
			<button type="button" onclick="exportJSON()">Export JSON (Save)</button>
		</legend>
		<ul id="jsonList"></ul>
	</fieldset>

<script>
	HTMLElement.prototype.$$ = function(s) { return this.querySelectorAll(s) }
	const $ = s => document.querySelector(s), $$ = s => document.querySelectorAll(s);
	
	function exportJSON() {
		var jsonString = JSON.stringify(loans, null, 2); // The second parameter (null) is for replacer function, and the third parameter (2) is for indentation (optional)
		var blob = new Blob([jsonString], { type: 'application/json' });
		var url = URL.createObjectURL(blob);
		var a = document.createElement('a');
		a.href = url;
		a.download = 'loans.json'; // Set the default filename
		document.body.appendChild(a);
		a.click();
		document.body.removeChild(a);
		URL.revokeObjectURL(url);
	}

	function importJSON() {
		var input = document.createElement('input');
		input.type = 'file';
		input.onchange = function (event) {
			var file = event.target.files[0];
			if (file) {
				var reader = new FileReader();
				reader.onload = function (e) {
					loans = JSON.parse(e.target.result);
					console.log(loans);
					showLoansList(loans);
				};
				reader.readAsText(file);
			}
		};
		input.click();
	}
	
	function removeJson(loan){
		delete loans[loan];
		showLoansList(loans);
	}
	
	function jsonToUL(json, ul, level=1) {
      for (var key in json) {
        if (json.hasOwnProperty(key)) {
          var li = document.createElement("li");
          li.innerHTML = key;
		  if(level === 1) li.innerHTML += "<button onclick='removeJson(previousSibling.nodeValue.trim())'>Remove</button>"
          if (typeof json[key] === "object" && !Array.isArray(json[key])) {
            var nestedUl = document.createElement("ul");
            li.appendChild(nestedUl);
            jsonToUL(json[key], nestedUl, level + 1);
          } else if (Array.isArray(json[key])) {
            var nestedUl = document.createElement("ul");
            li.appendChild(nestedUl);
            json[key].forEach(function(item) {
              var nestedLi = document.createElement("li");
              nestedLi.textContent = item;
              nestedUl.appendChild(nestedLi);
            });
          } else {
            li.textContent += ": " + json[key];
          }
          ul.appendChild(li);
        }
      }
    }
	
	const showLoansList = (loans) => {
		for(var key in loans){
			var loan = loans[key]
			for(var year in loan.payments){
				var payments = loan.payments[year];
				for(var month in payments){
					payments[month].interest = (loan.amount*(loan.rate/(100*12))).toFixed(2);
					payments[month].paydown = (payments[month].payment - loan.escrow - payments[month].interest).toFixed(2);
					if(payments[month].paydown > 0) {
						if((loan['unpaid interest'] || 0) === 0){
							loan.amount = (loan.amount - payments[month].paydown).toFixed(2); //there is no unpaid interest
							payments[month]['principal paydown'] = payments[month].paydown;
						}else if(loan['unpaid interest'] >= payments[month].paydown){
							loan['unpaid interest'] -= payments[month].paydown; //there is unpaid interest in excess of the paydown
							payments[month]['principal paydown'] = 0;
							payments[month]['unpaid interest paydown'] = payments[month].paydown;
						}else{
							var interestUnpaid = loan['unpaid interest']; //there is some unpaid interest but not in excess of payment
							loan['unpaid interest'] = 0;
							payments[month]['principal paydown'] = (payments[month].paydown - interestUnpaid).toFixed(2);
							payments[month]['unpaid interest paydown'] = interestUnpaid;
							loan.amount = (loan.amount - payments[month]['principal paydown']).toFixed(2);
						}
					}
					else loan['unpaid interest'] = (loan['Interest Unpaid'] || 0) - payments[month].paydown;
				}
			}
		}
		var jsonList = $("#jsonList");
		jsonList.innerHTML = '';
		jsonToUL(loans, jsonList);
	}
	
	function addPaymentField() {
		var paymentEntries = document.getElementById('paymentEntries');
		var newPaymentEntry = document.createElement('div');
		newPaymentEntry.className = 'payment-entry';
		
		newPaymentEntry.innerHTML = `
			<label for="paymentDate">Payment Date:</label>
			<input type="date" name="paymentDate[]" required>

			<label for="paymentAmount">Payment Amount:</label>
			<input type="number" step="0.01" name="paymentAmount[]" required>
		`;

		paymentEntries.appendChild(newPaymentEntry);
	}
	var loans = {};
	function addNewLoan() {
            var newLoanData = {
                "name": $('#borrowerName').value,
                "date": $('#loanDate').value,
                "rate": $('#interestRate').value,
                "amount": $('#loanAmount').value,
                "escrow": $('#escrowAmount').value,
                "payments": {}
            };

            var paymentDates = document.getElementsByName('paymentDate[]');
            var paymentAmounts = document.getElementsByName('paymentAmount[]');

            for (var i = 0; i < paymentDates.length; i++) {
                var date = paymentDates[i].value;
                var amount = paymentAmounts[i].value;

                // Extracting year and month from the date
                var year = date.split('-')[0];
                var month = date.split('-')[1];

                // Adding payment data to the new loan
                if (!newLoanData.payments[year]) {
                    newLoanData.payments[year] = {};
                }

                if (!newLoanData.payments[year][month]) {
                    newLoanData.payments[year][month] = {};
                }

                newLoanData.payments[year][month].payment = amount;
            }

            // Generating a unique key for the new loan
            var newLoanKey = "Loan_" + $('#loanAddress').value;

            // Adding the new loan to the loans object
            loans[newLoanKey] = newLoanData;
			
			$$('#newLoanForm input').forEach(input=>input.value='');
			

            // Logging the updated loans object (you can modify this part based on your use case)
            console.log(loans);
			
			showLoansList(loans);
        }
		
		
	
</script>
</body>
