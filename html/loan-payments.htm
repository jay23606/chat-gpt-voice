<!-- https://jay23606.github.io/chat-gpt-voice/html/loan-payments.htm -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Loan Management</title>
	<style>
	    ul {
            list-style-type: none;
            padding-left: 20px;
        }
        .collapsed {
            display: none;
        }
		/*.tbl td:first-child{
			width:100px
		}*/
	</style>
</head>
<body>
	<button type="button" onclick="importJSON()">Import JSON (Restore)</button> /
	<button type="button" onclick="exportJSON()">Export JSON (Save)</button>
	<fieldset>
	<legend>
		<label for="allLoansSelect">Select Loan:</label>
		<select id="allLoansSelect" onchange="changeSelectedLoan()">
		</select>
	</legend>
		
		<table class='tbl'>
			<tr>
				<td><strong>Key:</strong></td>
				<td colspan="3">
					<div id="keySelect">
						<label>
							<input type="radio" name="k" value="address" checked onchange="updateValueType()">
							Address
						</label>
						<label>
							<input type="radio" name="k" value="name" onchange="updateValueType()">
							Name
						</label>
						<label>
							<input type="radio" name="k" value="date" onchange="updateValueType()">
							Date
						</label>
						<label>
							<input type="radio" name="k" value="rate" onchange="updateValueType()">
							Rate
						</label>
						<label>
							<input type="radio" name="k" value="amount" onchange="updateValueType()">
							Amount
						</label>
						<label>
							<input type="radio" name="k" value="escrow" onchange="updateValueType()">
							Escrow
						</label>
						<label>
							<input type="radio" name="k" value="payments" onchange="updateValueType()">
							Payments
						</label>
					</div>
					
				</td>
			</tr>
			<tr>
				<td><strong>Value:</strong></td>
				<td colspan="3">
					<input type="text" id="valueInput" placeholder="Enter value" onkeyup="if(event.key==='Enter')processAction()">
				</td>
			</tr>
			<tr id="paymentsOptions" style="display:none">
				<td><strong>Year:</strong></td>
				<td>
					<select id="yearSelect" size="4">
						<option value="2023">2023</option>
						<option value="2024" selected>2024</option>
						<!-- Add more options as needed -->
					</select>
				</td>
				<td><strong>Month:</strong></td>
				<td>
					<select id="monthSelect" size="4">
						<option value="01" selected>January</option>
						<option value="02">February</option>
						<option value="03">March</option>
						<option value="04">April</option>
						<option value="05">May</option>
						<option value="06">June</option>
						<option value="07">July</option>
						<option value="08">August</option>
						<option value="09">September</option>
						<option value="10">October</option>
						<option value="11">November</option>
						<option value="12">December</option>
					</select>
				</td>
			</tr>
		</table>

		
		
		<div>
			<input type="radio" name="action" id="addRadio" checked>
			<label for="addRadio">Add/Update</label>
			
			<input style='display:none' type="radio" name="action" id="updateRadio">
			<label style='display:none' for="updateRadio">Update</label>
			
			<input type="radio" name="action" id="removeRadio">
			<label for="removeRadio">Remove</label>
			<button onclick="processAction()">Submit</button>
		</div>
		<ul id="jsonTree"></ul>
	</fieldset>

	<div>
		<button onclick="addLoan()">Add Loan</button>
	</div>

<script>
	const $ = s => document.querySelector(s), $$ = s => document.querySelectorAll(s);
	
    let loan = {}, loans = {};

	function exportJSON() {
		var jsonString = JSON.stringify(loans, null, 2); // The second parameter (null) is for replacer function, and the third parameter (2) is for indentation (optional)
		var blob = new Blob([jsonString], { type: 'application/json' });
		var url = URL.createObjectURL(blob);
		var a = document.createElement('a');
		a.href = url;
		a.download = 'loans.json'; // Set the default filename
		document.body.appendChild(a);
		a.click();
		document.body.removeChild(a);
		URL.revokeObjectURL(url);
	}

	function importJSON() {
		var input = document.createElement('input');
		input.type = 'file';
		input.onchange = function (event) {
			var file = event.target.files[0];
			if (file) {
				var reader = new FileReader();
				reader.onload = function (e) {
					loans = JSON.parse(e.target.result);
					console.log(loans);
					updateAllLoansSelect();
				};
				reader.readAsText(file);
			}
		};
		input.click();
		
		$('#valueInput').focus();
	}

    function updateAllLoansSelect() {
        const allLoansSelect = $('#allLoansSelect');
        allLoansSelect.innerHTML = '';
        for (const loanKey in loans) {
            const option = document.createElement('option');
            option.value = loanKey;
            option.textContent = loanKey;
            allLoansSelect.appendChild(option);
        }
		allLoansSelect.selectedIndex = allLoansSelect.options.length - 1;
		changeSelectedLoan();
    }

    function changeSelectedLoan() {
        const selectedLoanKey = $('#allLoansSelect').value;
        loan = { ...loans[selectedLoanKey] };
        console.log('Currently selected loan:', loan);
		jsonToUL(loan, $("#jsonTree"));
    }

    function updateValueType() {
		processAction();
	
        const selectedKey = $('#keySelect :checked').value, valueInput = $('#valueInput'), paymentsOptions = $('#paymentsOptions');

        paymentsOptions.style.display = (selectedKey === 'payments') ? 'table-row' : 'none';

        switch (selectedKey) {
            case 'date':
                valueInput.type = 'date';
                break;
            case 'amount':
            case 'escrow':
            case 'payments':
			case 'rate':
                valueInput.type = 'number';
                break;
            default:
                valueInput.type = 'text';
        }
		valueInput.focus();
    }

	function processAction() {
		const selectedKey = $('#keySelect :checked').value, value = $('#valueInput').value, addRadio = $('#addRadio'),
			updateRadio = $('#updateRadio'), removeRadio = $('#removeRadio');

		if (selectedKey === 'payments') {
			const payments = loan['payments'] || {}, year = $('#yearSelect').value, month = $('#monthSelect').value;

			if (addRadio.checked) {
				payments[year] = payments[year] || {};
				payments[year][month] = { 'payment': value };
			} else if (removeRadio.checked) 
				payments[year] && payments[year][month] && delete payments[year][month];
			
			loan['payments'] = payments;

			console.log(addRadio.checked ? 'Add' : removeRadio.checked ? 'Remove' : 'Update', '- Payments:', loan);
		} else {
			if (addRadio.checked) loan[selectedKey] = value;
			else if (removeRadio.checked) loan.hasOwnProperty(selectedKey) && delete loan[selectedKey];
			
			console.log(addRadio.checked ? 'Add' : removeRadio.checked ? 'Remove' : 'Update', `- ${selectedKey}:`, loan);
		}

		$('#valueInput').value = '';
		jsonToUL(loan, $("#jsonTree"));
	}


    function addLoan() {
        const address = loan['address'] || '',
            date = loan['date'] || '',
            loanKey = `${address}_${date}`;
        if (address && date && !loans[loanKey]) {
            loans[loanKey] = { ...loan };
            console.log(`Loan added: ${loanKey}`, loans);
            updateAllLoansSelect();
			
			
        } else {
            console.log("Invalid or existing loan information for addition.");
        }
    }
	
	const round2 = (num) => Math.round(num * 100) / 100;
	
	const calcLoanUpdates = (loan) => {
		if (!loan.amount || !loan.rate || !loan.payments) return;
		if (!loan.escrow) loan.escrow = 0;

		loan.balance = loan.amount;
		loan['unpaid interest'] = 0;

		// Sort the years numerically
		const sortedYears = Object.keys(loan.payments).sort((a, b) => parseInt(a) - parseInt(b));

		for (var year of sortedYears) {
			var payments = loan.payments[year];

			// Sort the months numerically
			const sortedMonths = Object.keys(payments).sort((a, b) => parseInt(a) - parseInt(b));

			for (var month of sortedMonths) {
				payments[month].interest = round2(loan.balance * (loan.rate / (100 * 12)));
				payments[month].paydown = round2(payments[month].payment - loan.escrow - payments[month].interest);

				if (payments[month].paydown > 0) {
					if ((loan['unpaid interest'] || 0) === 0) {
						loan.balance = round2(loan.balance - payments[month].paydown);
						payments[month]['principal paydown'] = payments[month].paydown;
					} else if (loan['unpaid interest'] >= payments[month].paydown) {
						loan['unpaid interest'] -= payments[month].paydown;
						payments[month]['principal paydown'] = 0;
						payments[month]['unpaid interest paydown'] = round2(payments[month].paydown);
					} else {
						var interestUnpaid = loan['unpaid interest'];
						loan['unpaid interest'] = 0;
						payments[month]['principal paydown'] = round2(payments[month].paydown - interestUnpaid);
						payments[month]['unpaid interest paydown'] = round2(interestUnpaid);
						loan.balance = round2(loan.balance - payments[month]['principal paydown']);
					}
				} else {
					loan['unpaid interest'] = round2((loan['unpaid interest'] || 0) - payments[month].paydown);
				}
			}
		}
	};



	function createYearOptions() {
		// Get the current year
		const currentYear = new Date().getFullYear();

		// Reference to the yearSelect dropdown
		const yearSelect = $("#yearSelect");

		// Clear existing options
		yearSelect.innerHTML = '';

		// Add options for the current year and the past 10 years
		for (let year = currentYear; year >= currentYear - 30; year--) {
			const option = document.createElement("option");
			option.value = year.toString();
			option.textContent = year.toString();

			// Set the selected attribute for the current year
			if (year === currentYear) {
				option.selected = true;
			}

			// Append the option to the yearSelect dropdown
			yearSelect.appendChild(option);
		}
	}
	
	function jsonToUL(json, ul) {
		calcLoanUpdates(json);
		ul.innerHTML = '';
		var keys = Object.keys(json).sort((a, b) => {
			const intA = parseInt(a);
			const intB = parseInt(b);
			if (!isNaN(intA) && !isNaN(intB)) return intA - intB;
			return a.localeCompare(b);
		});
		keys.forEach(key => {
			var li = document.createElement("li");
			if (typeof json[key] === "object" && !Array.isArray(json[key])) {
				li.innerHTML = `<strong>${key}:</strong>`;
				var nestedUl = document.createElement("ul");
				li.appendChild(nestedUl);
				jsonToUL(json[key], nestedUl);
			} else if (Array.isArray(json[key])) {
				li.innerHTML = `<strong>${key}:</strong>`;
				var nestedUl = document.createElement("ul");
				li.appendChild(nestedUl);
				json[key].forEach(function (item) {
					var nestedLi = document.createElement("li");
					nestedLi.textContent = item;
					nestedUl.appendChild(nestedLi);
				});
			} else {
				li.innerHTML = `<strong>${key}:</strong> ${json[key]}`;
			}
			ul.appendChild(li);
		});
	}

	createYearOptions();
	$('#valueInput').focus();
</script>

</body>
</html>
